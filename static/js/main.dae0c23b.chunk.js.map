{"version":3,"sources":["components/contactList/ContactList.module.css","components/filter/FIlter.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/contactForm/ContactForm.js","components/contactList/ContactList.js","components/filter/Filter.js","App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/contactForm/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","setFilter","axios","defaults","baseURL","contactsOperations","addContact","newContact","dispatch","a","post","data","deleteContact","id","delete","fetchContacts","get","getLoading","state","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","item","name","toLowerCase","includes","ContactForm","number","onHandleChange","e","target","value","setState","onHandleSubmit","preventDefault","console","log","props","contacts","find","contact","alert","this","className","styles","form","onSubmit","formName","formInput","type","pattern","title","onChange","required","formButton","isLoadingContacts","Component","connect","onDeleteContact","contactList","length","map","contactListItem","contactListItemSpan","listItemButton","onClick","filterName","filterInput","App","itemsReducer","createReducer","_","payload","actions","Number","filterReducer","loadingReducer","contactsReducer","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dae0c23b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__1_D8G\",\"contactListItem\":\"ContactList_contactListItem__1kcAF\",\"contactListItemSpan\":\"ContactList_contactListItemSpan__1OPY2\",\"listItemButton\":\"ContactList_listItemButton__u_X0H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterName\":\"FIlter_filterName__389t3\",\"filterInput\":\"FIlter_filterInput__2qv-K\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactsRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactsSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const deleteContactRequest = createAction(\r\n  \"contacts/deleteContactRequest\"\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  \"contacts/deleteContactSuccess\"\r\n);\r\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\n\r\n// ==================================================================\r\n// REDUX-TOOLKIT\r\n// import { createAction } from \"@reduxjs/toolkit\";\r\n\r\n// export const addContact = createAction(\"phonebook/addContact\");\r\n// export const deleteContact = createAction(\"phonebook/deleteContact\");\r\n// export const setFilter = createAction(\"phonebook/setFilter\");\r\n\r\n// const actions = { addContact, deleteContact, setFilter };\r\n// export default actions;\r\n\r\n// ==================================================================\r\n// Создай действия (actions) сохранения и удаления контакта, а также обновления фильтра.\r\n// REDUX\r\n// export const ADD_CONTACT = \"phonebook/addContact\";\r\n// export const DELETE_CONTACT = \"phonebook/deleteContact\";\r\n// export const SET_FILTER = \"phonebook/setFilter\";\r\n\r\n// const addContact = (newContact) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: newContact,\r\n// });\r\n// const deleteContact = (id) => ({ type: DELETE_CONTACT, payload: id });\r\n\r\n// const setFilter = (value) => ({ type: SET_FILTER, payload: value });\r\n// export { addContact, deleteContact, setFilter };\r\n","import axios from \"axios\";\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from \"./contactsActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (newContact) => async (dispatch) => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", newContact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = (id) => async (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  // console.log(`id`, id);\r\n  try {\r\n    await axios.delete(`/contacts/${id}`);\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst contactsOperations = { addContact, deleteContact, fetchContacts };\r\n\r\nexport default contactsOperations;\r\n\r\n// ===================================================\r\n// const addContact = (newContact) => (dispatch) => {\r\n//   // dispatch({ type: \"contacts/addContactRequest\" });\r\n//   dispatch(addContactRequest());\r\n//   axios.post(\"/contacts.json\", newContact).then(({ data }) =>\r\n//     // dispatch({ type: \"contacts/addContactSuccess\", payload: data }).\r\n//     dispatch(addContactSuccess(data)).catch((error) =>\r\n//       // dispatch({ type: \"contacts/addContactError\", payload: error }))\r\n//       dispatch(addContactError(error))\r\n//     )\r\n//   );\r\n// };\r\n\r\n// До переписывания на асинхронную\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n//   axios\r\n//     .get(\"/contacts.json\")\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n// const addContact = (newContact) => (dispatch) => {\r\n//   dispatch(addContactRequest());\r\n//   axios\r\n//     .post(\"/contacts\", newContact)\r\n//     // .then(console.log);\r\n//     .then(({ data }) =>\r\n//       dispatch(addContactSuccess(data)).catch((error) =>\r\n//         dispatch(addContactError(error))\r\n//       )\r\n//     );\r\n// };\r\n\r\n// const deleteContact = (id) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n//   axios\r\n//     .delete(`/contacts/${id}`)\r\n//     .then(() => dispatch(deleteContactSuccess(id)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n\r\n// export default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getLoading = (state) => state.loading;\r\nexport const getFilter = (state) => state.filter;\r\nexport const getAllContacts = (state) => state.items;\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const allContacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return allContacts.filter((item) =>\r\n//     item.name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n\r\n// Мемоизация\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (items, filter) => {\r\n    return items.filter((item) =>\r\n      item.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n","import React, { Component } from \"react\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport { connect } from \"react-redux\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\nimport styles from \"./ContactForm.module.css\";\r\nimport { getAllContacts, getLoading } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nclass ContactForm extends Component {\r\n  state = { name: \"\", number: \"\" };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  onHandleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onHandleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(`this.props.contacts`, this.props.contacts);\r\n    const addingContact = this.props.contacts.find(\r\n      (contact) => contact.name.toLowerCase() === this.state.name.toLowerCase()\r\n    );\r\n    if (addingContact) {\r\n      alert(`${this.state.name} is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n        <label className={styles.formName}>\r\n          Name:\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            value={this.state.name}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.formName}>\r\n          Phone№:\r\n          <input\r\n            className={styles.formInput}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            value={this.state.number}\r\n            onChange={this.onHandleChange}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.formButton}>\r\n          Add contact\r\n        </button>\r\n        {this.props.isLoadingContacts && <h1>Downloading...</h1>}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     contacts: state.items,\r\n//   };\r\n// };\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: getAllContacts(state),\r\n  isLoadingContacts: getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n    addContact: (newContact) =>\r\n      dispatch(contactsOperations.addContact(newContact)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// ====================================================================\r\n// class ContactForm extends Component {\r\n//   state = { name: \"\", number: \"\" };\r\n\r\n//   onHandleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   onHandleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     this.props.addContact({ ...this.state, id: uuidv4() });\r\n//     this.setState({ name: \"\", number: \"\" });\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <form className={styles.form} onSubmit={this.onHandleSubmit}>\r\n//         <label className={styles.formName}>\r\n//           Name:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             value={this.state.name}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <label className={styles.formName}>\r\n//           Phone№:\r\n//           <input\r\n//             className={styles.formInput}\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             value={this.state.number}\r\n//             onChange={this.onHandleChange}\r\n//             required\r\n//           />\r\n//         </label>\r\n//         <button type=\"submit\" className={styles.formButton}>\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./ContactList.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsOperations from \"../../redux/contacts/contactsOperations\";\r\nimport { getVisibleContacts } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nconst ContactList = ({ items, deleteContact }) => {\r\n  // console.log(`contacts list`, items);\r\n  const onDeleteContact = (e) => {\r\n    deleteContact(e.target.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ul className={styles.contactList}>\r\n        {items.length > 0 &&\r\n          items.map(({ name, number, id }) => (\r\n            <li className={styles.contactListItem} key={id}>\r\n              <span className={styles.contactListItemSpan}>{name}</span>:\r\n              <span className={styles.contactListItemSpan}>{number}</span>\r\n              <button\r\n                type=\"button\"\r\n                className={styles.listItemButton}\r\n                onClick={onDeleteContact}\r\n                id={id}\r\n              >\r\n                Detete\r\n              </button>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    items: getVisibleContacts(state),\r\n  };\r\n};\r\n\r\n// До селектора:\r\n// const mapStateToProps = (state) => {\r\n//   // return { items: state.items };\r\n//   return {\r\n//     items: state.items.filter((item) =>\r\n//       item.name.toLowerCase().includes(state.filter.toLowerCase())\r\n//     ),\r\n//   };\r\n// };\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  deleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport styles from \"./FIlter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions\";\r\nimport { getFilter } from \"../../redux/contacts/contactsSelectors\";\r\n\r\nconst Filter = ({ filter, setFilter }) => {\r\n  return (\r\n    <>\r\n      <label className={styles.filterName}>\r\n        Find contacts by name\r\n        <input\r\n          className={styles.filterInput}\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={(e) => setFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: getFilter(state),\r\n});\r\n\r\nexport default connect(mapStateToProps, { setFilter: setFilter })(Filter);\r\n","import React from \"react\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nconst App = () => {\n  return (\n    <>\n      <h1 className=\"appHeading\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"appHeading\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default App;\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  setFilter,\r\n} from \"./contactsActions\";\r\n\r\nconst itemsReducer = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  //возвращает массив контактов, который записывается поверх (распылять не надо)\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, actions) =>\r\n    state.filter((item) => item.id !== Number(actions.payload)),\r\n});\r\n\r\nconst filterReducer = createReducer(\"\", {\r\n  [setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loadingReducer = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: itemsReducer,\r\n  filter: filterReducer,\r\n  loading: loadingReducer,\r\n});\r\n\r\nexport default contactsReducer;\r\n\r\n// ============================================================================\r\n// REDUX-TOOLKIT\r\n// import { createReducer } from \"@reduxjs/toolkit\";\r\n// import { combineReducers } from \"redux\";\r\n// import actions from \"./contactsActions\";\r\n\r\n// // console.log(actions.addContact.type);\r\n// // console.log(actions.deleteContact.type);\r\n// // console.log(actions.setFilter.type);\r\n\r\n// const itemsReducer = createReducer([], {\r\n//   addContactSuccess: (state, { payload }) => [...state, payload],\r\n//   [actions.deleteContact]: (state, { payload }) =>\r\n//     state.filter((item) => item.id !== payload),\r\n// });\r\n\r\n// const filterReducer = createReducer(\"\", {\r\n//   [actions.setFilter]: (_, { payload }) => payload,\r\n// });\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// export default contactsReducer;\r\n\r\n// ============================================================================\r\n// // Создай редюсеры контактов и фильтра.\r\n// REDUX\r\n// import { combineReducers } from \"redux\";\r\n// import { ADD_CONTACT, DELETE_CONTACT, SET_FILTER } from \"./phonebookActions\";\r\n\r\n// // state={items:[{name:'', number:''},{name:'', number:''}], filter:''}\r\n\r\n// const itemsReducer = (state = [], { type, payload }) => {\r\n//   // console.log(payload);\r\n//   // console.log(state);\r\n//   switch (type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, payload];\r\n\r\n//     case DELETE_CONTACT:\r\n//       return state.filter((item) => item.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filterReducer = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case SET_FILTER:\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: itemsReducer,\r\n//   filter: filterReducer,\r\n// });\r\n\r\n// // const rootReducer = combineReducers({\r\n// //   contacts: contactsReducer,\r\n// // });\r\n\r\n// export default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\n// import storage from \"redux-persist/lib/storage\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n];\r\n\r\n// const persistConfig = {\r\n//   key: \"root\",\r\n//   storage,\r\n//   whitelist: [\"items\"],\r\n// };\r\n// const rootReducer = contactsReducer;\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: contactsReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n\r\n// ===========================\r\n// json смотреть по ссылке\r\n// http://localhost:4040/contacts\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"modern-normalize/modern-normalize.css\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={<h2>...isloading</h2>} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2PTI5\",\"formName\":\"ContactForm_formName__3kI1Y\",\"formInput\":\"ContactForm_formInput__2F6Dq\",\"formButton\":\"ContactForm_formButton__2XjuN\"};"],"sourceRoot":""}